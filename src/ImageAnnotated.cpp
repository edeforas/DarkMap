#include "ImageAnnotated.h"

#include "opencv2/imgproc.hpp"

//////////////////////////////////////////////////////////////////////////////
ImageAnnotated::ImageAnnotated()
{ }
//////////////////////////////////////////////////////////////////////////////
ImageAnnotated::~ImageAnnotated()
{ }
//////////////////////////////////////////////////////////////////////////////
void ImageAnnotated::compute(const cv::Mat & mRaw)
{
	//save raw image
	_mRaw=mRaw.clone();
	
	//Grayscale conversion if needed
	cv::Mat& mGreyR=_mRaw;
	cv::Mat mGrey;
	if(mGrey.channels()!=1)
	{
		cv::cvtColor(mRaw, mGrey, cv::COLOR_RGB2GRAY);
		mGreyR=mGrey;
	}
	
	//detect keypoints
	auto detector = cv::ORB::create();
	detector->detectAndCompute(mGreyR,cv::noArray(),_keypoints, _descriptors);
}
//////////////////////////////////////////////////////////////////////////////	
const cv::Mat& ImageAnnotated::raw() const
{
	return _mRaw;
}
//////////////////////////////////////////////////////////////////////////////	
const std::vector<cv::KeyPoint>& ImageAnnotated::keypoints() const
{
	return _keypoints;
}
//////////////////////////////////////////////////////////////////////////////	
const cv::Mat& ImageAnnotated::descriptors() const
{
	return _descriptors;
}
//////////////////////////////////////////////////////////////////////////////	
bool ImageAnnotated::have_checkerboard() const
{
	return false;
}
//////////////////////////////////////////////////////////////////////////////	
bool ImageAnnotated::have_keypoints() const
{
	return _keypoints.size()!=0;
}
//////////////////////////////////////////////////////////////////////////////	
